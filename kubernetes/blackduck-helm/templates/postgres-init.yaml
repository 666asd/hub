{{ if eq .Values.postgres.isExternal false -}}
# TODO - this script should be owned by Black Duck Engineering https://sig-gitlab.internal.synopsys.com/blackduck/hub/third-party-images/blackduck-postgres/blob/release/v_1_0_11/1-hub-setup.sql
apiVersion: v1
data:
  init.sh: |-
    #!/bin/bash
    set -e
    export PGPASSWORD="$POSTGRES_ADMIN_PASSWORD"
    POSTGRES_USER="postgres"
    if [ "{{ .Values.postgres.isExternal }}" = "true" ]; then
      echo "external true"
      PGPASSWORD="$BLACKDUCK_ADMIN_PASSWORD"
      POSTGRES_USER="blackduck"     
    fi

    echo "connecting to postgres server"
    until PGPASSWORD=$PGPASSWORD pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d postgres; do
      echo "waiting for postgres server...."
      sleep 1
    done

    echo "database will be initialized"

    echo "postgres database setup started"
    PGPASSWORD=$PGPASSWORD psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d postgres << EOF
    GRANT blackduck TO postgres\gexec
    SELECT 'CREATE DATABASE bds_hub owner blackduck TEMPLATE template0 ENCODING SQL_ASCII' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'bds_hub')\gexec
    SELECT 'CREATE DATABASE bds_hub_report owner blackduck TEMPLATE template0 ENCODING SQL_ASCII' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'bds_hub_report')\gexec
    SELECT 'CREATE DATABASE bdio owner blackduck TEMPLATE template0 ENCODING SQL_ASCII' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'bdio')\gexec
    ALTER USER blackduck WITH NOCREATEDB SUPERUSER NOREPLICATION BYPASSRLS\gexec
    SELECT 'CREATE USER blackduck_user WITH NOCREATEDB NOSUPERUSER NOREPLICATION NOBYPASSRLS' WHERE NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'blackduck_user')\gexec
    ALTER USER blackduck_user WITH password '$BLACKDUCK_USER_PASSWORD'\gexec
    SELECT 'CREATE USER blackduck_reporter' WHERE NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'blackduck_reporter')\gexec
    EOF
    echo "postgres database setup completed"

    echo "bds hub database setup started"
    PGPASSWORD=$PGPASSWORD psql -h $POSTGRES_HOST -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d bds_hub << EOF
    CREATE EXTENSION IF NOT EXISTS pgcrypto\gexec
    CREATE SCHEMA IF NOT EXISTS st AUTHORIZATION blackduck\gexec
    GRANT USAGE ON SCHEMA st TO blackduck_user\gexec
    GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON ALL TABLES IN SCHEMA st TO blackduck_user\gexec
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA st to blackduck_user\gexec
    ALTER DEFAULT PRIVILEGES IN SCHEMA st GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON TABLES TO blackduck_user\gexec
    ALTER DEFAULT PRIVILEGES IN SCHEMA st GRANT ALL PRIVILEGES ON SEQUENCES TO blackduck_user\gexec
    ALTER DATABASE bds_hub SET standard_conforming_strings TO OFF\gexec
    EOF
    echo "bds hub database setup completed"

    echo "bds hub report database setup started"
    PGPASSWORD=$PGPASSWORD psql -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d bds_hub_report << EOF
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO blackduck_reporter\gexec
    ALTER DEFAULT PRIVILEGES FOR ROLE blackduck IN SCHEMA public GRANT SELECT ON TABLES TO blackduck_reporter\gexec
    GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON ALL TABLES IN SCHEMA public TO blackduck_user\gexec
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public to blackduck_user\gexec
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, TRUNCATE, DELETE, REFERENCES ON TABLES TO blackduck_user\gexec
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO blackduck_user\gexec
    ALTER DATABASE bds_hub_report SET standard_conforming_strings TO OFF\gexec
    EOF
    echo "bds hub report database setup completed"

    echo "bdio database setup started"
    PGPASSWORD=$PGPASSWORD psql -h $POSTGRES_HOST -p "$POSTGRES_PORT" -U "$POSTGRES_USER" -d bdio << EOF
    GRANT ALL PRIVILEGES ON DATABASE bdio TO blackduck_user\gexec
    ALTER DATABASE bdio SET standard_conforming_strings TO ON\gexec
    EOF
    echo "bdio database setup completed"
kind: ConfigMap
metadata:
  labels:
    {{- include "bd.labels" . | nindent 4 }}
    component: postgres
  name: {{ .Release.Name }}-blackduck-postgres-init-config
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    {{- include "bd.labelsWithoutVersion" . | nindent 4 }}
    component: postgres-init
  name: {{ .Release.Name }}-blackduck-postgres-init
spec:
  template:
    metadata:
      labels:
        {{- include "bd.selectorLabelsWithoutVersion" . | nindent 8 }}
        component: postgres-init
      name: {{ .Release.Name }}-blackduck-postgres-init
    spec:
      volumes:
        - name: postgres-init
          configMap:
            defaultMode: 0777
            name: {{ .Release.Name }}-blackduck-postgres-init-config
      initContainers:
      - name: synopsys-init
        {{- if .Values.init.registry }}
        image: {{ .Values.init.registry }}/synopsys-init:{{ .Values.init.imageTag }}
        {{- else }}
        image: {{ .Values.registry }}/synopsys-init:{{ .Values.init.imageTag }}
        {{- end}}
        env:                                 
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_HOST            
              name: {{ .Release.Name }}-blackduck-db-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_PORT
              name: {{ .Release.Name }}-blackduck-db-config              
        - name: POSTGRESQL_USER
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_ADMIN
              name: {{ .Release.Name }}-blackduck-db-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HUB_POSTGRES_ADMIN_PASSWORD_FILE
              name: {{ .Release.Name }}-blackduck-db-creds
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_ENABLE_SSL
              name: {{ .Release.Name }}-blackduck-db-config
        args:
        - "--postgres-database=postgres" # Postgres database name
        - "--postgres-host=$(POSTGRES_HOST)" # Postgres database host
        - "--postgres-password=$(POSTGRESQL_PASSWORD)" # Postgres database password
        - "--postgres-port=$(POSTGRES_PORT)" # Postgres database port
        - "--postgres-user=$(POSTGRESQL_USER)" # Postgres database user
        - "--postgres-ssl-mode=$(POSTGRES_SSL_MODE)" # Postgres SSL mode
        imagePullPolicy: Always
        {{- with .Values.init.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
      containers:
      - name: postgres-init
        {{- if .Values.postgres.registry }}
        image: {{ .Values.postgres.registry }}/postgresql-96-rhel7:1
        {{- else }}
        image: {{ .Values.registry }}/postgresql-96-rhel7:1
        {{- end}}
        command: ["/bin/bash"]
        args: ["-c", "sleep 60; /tmp/postgres-init/init.sh"]
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-blackduck-db-config
              key: HUB_POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-blackduck-db-config
              key: HUB_POSTGRES_PORT
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HUB_POSTGRES_ADMIN_PASSWORD_FILE
              name: {{ .Release.Name }}-blackduck-db-creds
        - name: POSTGRES_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HUB_POSTGRES_POSTGRES_PASSWORD_FILE
              name: {{ .Release.Name }}-blackduck-db-creds
        - name: BLACKDUCK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HUB_POSTGRES_ADMIN_PASSWORD_FILE
              name: {{ .Release.Name }}-blackduck-db-creds
        - name: BLACKDUCK_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HUB_POSTGRES_USER_PASSWORD_FILE
              name: {{ .Release.Name }}-blackduck-db-creds
        volumeMounts:
          - mountPath: /tmp/postgres-init
            name: postgres-init
        {{- with .Values.postgres.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
        imagePullPolicy: IfNotPresent
      {{- include "bd.imagePullSecrets" . | nindent 6 }}
      {{- with .Values.postgres.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.postgres.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.postgres.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- with .Values.postgres.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-blackduck-service-account
      restartPolicy: Never
  backoffLimit: 4
{{- end }}