apiVersion: v1
kind: Service
metadata:
  labels:
    {{- include "bd.labelsWithoutVersion" . | nindent 4 }}
    component: zookeeper
  name: {{ .Release.Name }}-blackduck-zookeeper
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: port-2181
    port: 2181
    protocol: TCP
    targetPort: 2181
  selector:
    {{- include "bd.selectorLabelsWithoutVersion" . | nindent 4 }}
    component: zookeeper
  type: ClusterIP
---
{{- if and .Values.enablePersistentStorage (not .Values.zookeeper.persistentVolumeClaimName) }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    {{- include "bd.labelsWithoutVersion" . | nindent 4 }}
    component: pvc
  name: {{ .Release.Name }}-blackduck-zookeeper
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.zookeeper.claimSize }}
  {{- if .Values.zookeeper.storageClass }}
  storageClassName: {{ .Values.zookeeper.storageClass }}
  {{- else if .Values.storageClass }}
  storageClassName: {{ .Values.storageClass }}
  {{- end}}
  {{- if .Values.zookeeper.volumeName }}
  volumeName: {{ .Values.zookeeper.volumeName }}
  {{- end -}}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "bd.labels" . | nindent 4 }}
    component: zookeeper
  name: {{ .Release.Name }}-blackduck-zookeeper
  namespace: {{ .Release.Namespace }}
spec:
  {{- if eq .Values.status "Running" }}
  replicas: 1
  {{- else }}
  replicas: 0
  {{- end }}
  selector:
    matchLabels:
      {{- include "bd.selectorLabelsWithoutVersion" . | nindent 6 }}
      component: zookeeper
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "bd.selectorLabels" . | nindent 8 }}
        component: zookeeper
      annotations:
        checksum/blackduck-config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/postgres-config: {{ include (print $.Template.BasePath "/postgres-config.yaml") . | sha256sum }}
      name: {{ .Release.Name }}-blackduck-zookeeper
    spec:
      initContainers:
      - name: synopsys-init
        {{- if .Values.init.registry }}
        image: {{ .Values.init.registry }}/synopsys-init:{{ .Values.init.imageTag }}
        {{- else }}
        image: {{ .Values.registry }}/synopsys-init:{{ .Values.init.imageTag }}
        {{- end}}
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_HOST
              name: {{ .Release.Name }}-blackduck-db-config
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_PORT
              name: {{ .Release.Name }}-blackduck-db-config
        - name: POSTGRESQL_USER
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_CONNECTION_ADMIN
              name: {{ .Release.Name }}-blackduck-config
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HUB_POSTGRES_ADMIN_PASSWORD_FILE
              name: {{ .Release.Name }}-blackduck-db-creds
        - name: POSTGRES_SSL_MODE
          valueFrom:
            configMapKeyRef:
              key: HUB_POSTGRES_ENABLE_SSL
              name: {{ .Release.Name }}-blackduck-db-config
        args:
        - "--postgres-database=bdio" # Postgres database name
        - "--postgres-host=$(POSTGRES_HOST)" # Postgres database host
        - "--postgres-password=$(POSTGRESQL_PASSWORD)" # Postgres database password
        - "--postgres-port=$(POSTGRES_PORT)" # Postgres database port
        - "--postgres-user=$(POSTGRESQL_USER)" # Postgres database user
        - "--postgres-ssl-mode=$(POSTGRES_SSL_MODE)" # Postgres SSL mode
        imagePullPolicy: Always
        {{- with .Values.init.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
      containers:
      - envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-blackduck-config
        {{- if .Values.zookeeper.registry }}
          {{- if .Values.zookeeper.imageTag }}
        image: {{ .Values.zookeeper.registry }}/blackduck-zookeeper:{{ .Values.zookeeper.imageTag }}
          {{- else }}
        image: {{ .Values.zookeeper.registry }}/blackduck-zookeeper:{{ .Values.zookeeper.imageTag }}
          {{- end}}
        {{- else }}
          {{- if .Values.zookeeper.imageTag }}
        image: {{ .Values.registry }}/blackduck-zookeeper:{{ .Values.zookeeper.imageTag }}
          {{- else }}
        image: {{ .Values.registry }}/blackduck-zookeeper:{{ .Values.zookeeper.imageTag }}
          {{- end}}
        {{- end}}
        imagePullPolicy: Always
        {{- include "zookeeperLivenessProbe" . | nindent 8 }}
        name: zookeeper
        ports:
        - containerPort: 2181
          protocol: TCP
        resources:
          {{- toYaml .Values.webserver.resources | nindent 12 }}
        {{- with .Values.zookeeper.securityContext }}
        securityContext:
{{ toYaml . | indent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /opt/blackduck/zookeeper/data
          name: dir-zookeeper
          subPath: data
        - mountPath: /opt/blackduck/zookeeper/datalog
          name: dir-zookeeper
          subPath: datalog
      dnsPolicy: ClusterFirst
      {{- include "bd.imagePullSecrets" . | nindent 6 }}
      {{- with .Values.zookeeper.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.zookeeper.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.zookeeper.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
      {{- end }}
      {{- if .Values.zookeeper.podSecurityContext }}
      {{- with .Values.zookeeper.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- else }}
      {{- include "bd.podSecurityContext" . | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-blackduck-service-account
      restartPolicy: Always
      volumes:
      {{- include "zookeeperPersistentStorage" . | nindent 6 }}

{{- define "zookeeperLivenessProbe" -}}
{{- if .Values.enableLivenessProbe -}}
livenessProbe:
  exec:
    command:
    - zkServer.sh
    - status
    - /opt/blackduck/zookeeper/conf/zoo.cfg
  failureThreshold: 10
  initialDelaySeconds: 240
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 10
{{- end -}}
{{- end -}}

{{- define "zookeeperPersistentStorage" -}}
{{- if .Values.enablePersistentStorage -}}
- name: dir-zookeeper
  persistentVolumeClaim:
    claimName: {{if .Values.zookeeper.persistentVolumeClaimName}} {{.Values.zookeeper.persistentVolumeClaimName}} {{else}} {{ .Release.Name }}-blackduck-zookeeper {{end}}
{{- else -}}
- emptyDir: {}
  name: dir-zookeeper
{{- end -}}
{{- end -}}
