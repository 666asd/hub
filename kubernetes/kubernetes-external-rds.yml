---
kind: List
apiVersion: v1
items:
###    CONFIG MAPS
###    Set the values here to your database credentials
###    that are defined in your RDS or other external database
###    instance.
- apiVersion: v1
  data:
    HUB_POSTGRES_ADMIN_PASSWORD_FILE: |
      blackduck
  kind: ConfigMap
  metadata:
    name: hpup-admin
- apiVersion: v1
  data:
    HUB_POSTGRES_USER_PASSWORD_FILE: |
      blackduck
  kind: ConfigMap
  metadata:
    name: hpup-user
- apiVersion: v1
  data:
    HUB_POSTGRES_ADMIN: blackduck
    HUB_POSTGRES_ENABLE_SSL: "false"
    HUB_POSTGRES_HOST: blackduck.xyzh.us-east-1.rds.amazonaws.com
    HUB_POSTGRES_PORT: "5432"
    HUB_POSTGRES_USER: blackduck_user
    HUB_WEBSERVER_PORT: "8443"
    IPV4_ONLY: "0"
    PUBLIC_HUB_WEBSERVER_PORT: "443"
  kind: ConfigMap
  metadata:
    name: hub-config

- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: cfssl
  spec:
    replicas: 1
    template:
      metadata:
        name: cfssl
        labels:
          app: cfssl
          tier: cfssl
      spec:
        volumes:
        - emptyDir: {}
          name: dir-1
        containers:
        - image: blackducksoftware/hub-cfssl:4.4.3
          imagePullPolicy: Always
          name: hub-cfssl
          resources:
            requests:
              memory: 640M
            limits:
              memory: 640M
          envFrom:
          - configMapRef:
              name: "hub-config"
          volumeMounts:
          - mountPath: /etc/cfssl
            name: dir-1
          ports:
          - containerPort: 8888
          terminationMessagePath: /dev/termination-log
          imagePullPolicy: Always
          env:
          - name: HUB_VERSION
            value: 4.4.3
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
- apiVersion: v1
  kind: Service
  metadata:
    name: cfssl
  spec:
    ports:
    - name: 8888-tcp
      port: 8888
      targetPort: 8888
    selector:
      app: cfssl
  status:
    loadBalancer: {}
###   NOTE THAT WE DON'T HAVE ANY POSTGRES HERE, SEE CONFIGMAP FOR DETAILS.
### SERVICES
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: jobrunner
  spec:
    replicas: 1
    template:
      metadata:
        name: jobrunner
        labels:
          app: jobrunner
          tier: jobrunner
      spec:
        volumes:
        - name: hpup-user
          configMap:
            name: hpup-user
        - name: hpup-admin
          configMap:
            name: hpup-admin
        containers:
        - image: blackducksoftware/hub-jobrunner:4.4.3
          name: jobrunner
          resources:
            requests:
              cpu: 1
              memory: 4608M
            limits:
              cpu: 1
              memory: 4608M
          volumeMounts:
          - mountPath: "/run/secrets/HUB_POSTGRES_USER_PASSWORD_FILE"
            name: hpup-user
            subPath: HUB_POSTGRES_USER_PASSWORD_FILE
          - mountPath: "/run/secrets/HUB_POSTGRES_ADMIN_PASSWORD_FILE"
            name: hpup-admin
            subPath: HUB_POSTGRES_ADMIN_PASSWORD_FILE
          envFrom:
          - configMapRef:
              name: hub-config
          env:
          - name: HUB_POSTGRES_ENABLE_SSL
            value: "false"
          - name: HUB_MAX_MEMORY
            value: 4096m
          - name: HUB_VERSION
            value: 4.4.3
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: nginx-webapp-logstash
  spec:
    replicas: 1
    template:
      metadata:
        name: nginx-webapp-logstashsh
        labels:
          app: nginx-webapp-logstash
          tier: nginx-webapp-logstash
      spec:
        volumes:
        - emptyDir: {}
          name: dir-webapp
        - emptyDir: {}
          name: dir-logstash
        - name: dir-webserver
          emptyDir: {}
        - name: hpup-user
          configMap:
            name: hpup-user
        - name: hpup-admin
          configMap:
            name: hpup-admin
        containers:
        - name: webapp
          resources:
            requests:
              cpu: "1"
              memory: "2048M"
          image: blackducksoftware/hub-webapp:4.4.3
          imagePullPolicy: Always
          env:
          - name: HUB_MAX_MEMORY
            value: 4096m
          - name: HUB_VERSION
            value: 4.4.3
          envFrom:
          - configMapRef:
              name: hub-config
          volumeMounts:
          - mountPath: "/opt/blackduck/hub/logs"
            name: dir-webapp
          - mountPath: "/var/lib/logstash/data"
            name: dir-logstash
          - mountPath: "/run/secrets/HUB_POSTGRES_USER_PASSWORD_FILE"
            name: hpup-user
            subPath: HUB_POSTGRES_USER_PASSWORD_FILE
          - mountPath: "/run/secrets/HUB_POSTGRES_ADMIN_PASSWORD_FILE"
            name: hpup-admin
            subPath: HUB_POSTGRES_ADMIN_PASSWORD_FILE
          ports:
          - containerPort: 8080
        - image: blackducksoftware/hub-logstash:4.4.3
          imagePullPolicy: Always
          name: logstash
          resources:
            requests:
              memory: 640M
            limits:
              memory: 640M
          volumeMounts:
          - mountPath: "/opt/blackduck/hub/logs"
            name: dir-webapp
          - mountPath: "/var/lib/logstash/data"
            name: dir-logstash
          ports:
          - containerPort: 5044 # filebeat
          env:
          - name: HUB_VERSION
            value: 4.4.3
        - name: nginx
          resources:
            requests:
              memory: 512M
            limits:
              memory: 512M
          image: blackducksoftware/hub-nginx:4.4.3
          imagePullPolicy: Always
          ports:
          - containerPort: 8443
          volumeMounts:
          - mountPath: "/opt/blackduck/hub/webserver/security"
            name: dir-webserver
          env:
          - name: HUB_VERSION
            value: 4.4.3
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: documentation
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: documentation
        name: documentation
      spec:
        containers:
        - image: "blackducksoftware/hub-documentation:4.4.3"
          imagePullPolicy: Always
          name: documentation
          resources:
            limits:
              memory: "512M"
            requests:
              memory: "512M"
          ports:
          - containerPort: 8080
          env:
          - name: HUB_VERSION
            value: 4.4.3
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: solr
  spec:
    replicas: 1
    template:
      metadata:
        name: solr
        labels:
          app: solr
          tier: solr
      spec:
        containers:
        - name: solr
          image: blackducksoftware/hub-solr:4.4.3
          imagePullPolicy: Always
          envFrom:
          - configMapRef:
              name: hub-config
          resources:
            requests:
              memory: "640M"
            limits:
              memory: "640M"
            env:
            - name: HUB_VERSION
              value: 4.4.3
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: registration
  spec:
    replicas: 1
    template:
      metadata:
        name: registration
        labels:
          app: registration
          tier: registration
      spec:
        volumes:
        - emptyDir: {}
          name: dir-1
        containers:
        - envFrom:
          - configMapRef:
              name: hub-config
          env:
          image: blackducksoftware/hub-registration:4.4.3
          name: registration
          resources:
            requests:
              memory: 640M
            limits:
              memory: 640M
          ports:
          - containerPort: 8080
          env:
          - name: HUB_VERSION
            value: 4.4.3
          volumeMounts:
          - mountPath: "/opt/blackduck/hub/registration/config"
            name: dir-1
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: zookeeper
  spec:
    replicas: 1
    template:
      metadata:
        name: zookeeper
        labels:
          app: zookeeper
          tier: zookeeper
      spec:
        volumes:
        - emptyDir: {}
          name: dir-1
        containers:
        - envFrom:
          - configMapRef:
              name: hub-config
          image: blackducksoftware/hub-zookeeper:4.4.3
          name: zookeeper
          resources:
            requests:
              memory: 384M
            limits:
              memory: 384M
          volumeMounts:
          - mountPath: "/opt/blackduck/hub/logs"
            name: dir-1
          env:
          - name: HUB_VERSION
            value: 4.4.3
- apiVersion: v1
  kind: Service
  metadata:
    name: zookeeper
  spec:
    ports:
    - name: 2181-tcp
      port: 2181
      targetPort: 2181
    selector:
      app: zookeeper
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: nginx-webapp-logstash
  spec:
    ports:
    - name: 443-tcp
      port: 443
      targetPort: 8443
    selector:
      app: nginx-webapp-logstash
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: webapp
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      app: nginx-webapp-logstash
  status:
    loadBalancer: {}
# Important to expose logstash for writing to logs.  maybe for reading as well .
- apiVersion: v1
  kind: Service
  metadata:
    name: logstash
  spec:
    ports:
    - name: 4560-tcp
      port: 4560
      targetPort: 4560
    - name: 5044-tcp-filebeat
      port: 5044
      targetPort: 5044
    selector:
      app: nginx-webapp-logstash
- apiVersion: v1
  kind: Service
  metadata:
    name: solr
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      app: solr

- apiVersion: v1
  kind: Service
  metadata:
    name: registration
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      app: registration

- apiVersion: v1
  kind: Service
  metadata:
    name: documentation
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      app: documentation
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: hub-scan
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: hub-scan
        name: hub-scan
      spec:
        containers:
        - image: "blackducksoftware/hub-scan:4.4.3"
          imagePullPolicy: Always
          env:
          - name: HUB_POSTGRES_ENABLE_SSL
            valueFrom:
              configMapKeyRef:
                key: HUB_POSTGRES_ENABLE_SSL
                name: hub-config
          - name: HUB_POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                key: HUB_POSTGRES_HOST
                name: hub-config
          - name: blackduck_hub_db_password
            valueFrom:
              configMapKeyRef:
                key: blackduck_hub_db_password
                name: hub-config
          - name: blackduck_hub_report_admin_db_password
            valueFrom:
              configMapKeyRef:
                key: blackduck_hub_admin_db_password
                name: hub-config
          - name: blackduck_hub_bdio_db_password
            valueFrom:
              configMapKeyRef:
                key: blackduck_hub_bdio_db_password
                name: hub-config
          - name: blackduck_hub_report_db_password
            valueFrom:
              configMapKeyRef:
                key: blackduck_hub_admin_db_password
                name: hub-config
          - name: HUB_VERSION
            value: 4.4.3
          name: hub-scan
          resources:
            limits:
              memory: "2G"
            requests:
              memory: "2G"
          ports:
          - containerPort: 8080
- apiVersion: v1
  kind: Service
  metadata:
    name: scan # this is the default service name the hub looks for.
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      app: hub-scan
  status:
    loadBalancer: {}
